@page "/glazordemo"
@using Glue.Entities
@using Glue.Logging
@using Glue.Transport
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.IO
@using Glue.Channels
@using Glue.Notifications
@inject GlueProvider glueProvider
@inject IJSRuntime js
@inject NavigationManager navigationManager_

<h1>Glazor demo</h1>

<div class="row">
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="RegisterMethod">Register Method</button>
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="InvokeMethod">Invoke Method</button>
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="StartApplication">Start portfolio</button>
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="SetInstrument">Set Instrument</button>
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="RaiseNotification">Raise Notification</button>
    </div>
    <div class="col-sm-2">
        <select @bind="selectedInstrument">
            <option value=""></option>
            @foreach (var instrument in availableInstruments)
            {
                <option value="@instrument">@instrument</option>
            }
        </select>
    </div>

</div>

<div class="row">
    <div class="col">
        @interopMessage
    </div>
</div>

<table class="table" id="myTable">
    <thead>
    <tr>
        <th>Sync</th>
        <th>RIC</th>
        <th>Shares</th>
        <th>Price</th>
        <th>Description</th>
    </tr>
    </thead>
    <tbody>
    @if (data_ is null)
    {
        <p style="color: white;">
            <em>Loading . . .</em>
        </p>
    }
    else
    {
        @foreach (PortfolioData pf in data_)
        {
            <tr>
                <td>
                    <button @onclick="() => Sync(pf)">o</button>
                </td>
                <td>@pf.RIC</td>
                <td>@pf.Shares</td>
                <td>@pf.Price</td>
                <td>@pf.Description</td>
            </tr>
        }
    }
    </tbody>
</table>

@code {

    Task Sync(PortfolioData pf)
    {
        return SetRicInChannel(pf.RIC);
    }

    class ClientData
    {
        public string Name { get; set; }
        public T42Contact Contact { get; set; }
        public double PortfolioValue { get; set; }
        public IEnumerable<PortfolioData> Portfolio { get; internal set; }
    }

    class PortfolioData
    {
        public string RIC { get; set; }
        public int Shares { get; set; }
        public double Price { get; set; }
        public string Description { get; set; }
    }

    string selectedInstrument = "";

    readonly List<string> availableInstruments = new List<string>
    {
        "VOD:LN",
        "BARC:LN",
        "BMW:GR",
        "AAL:LN",
        "GOOGL:US",
        "MSFT:US",
        "TEAM:US",
        "CRM:US",
        "JPM:US",
        "FB:US"
    };

    private List<PortfolioData> data_;

    protected override async Task OnInitializedAsync()
    {
        data_ = await GetInstruments();
    }

    async Task<List<PortfolioData>> GetInstruments()
    {
        int max_attempts = 3;
        while (max_attempts-- > 0)
        {
            try
            {
                var gwSerializer = new GwProtocolSerializer(DebugLoggerFactory.Instance.GetLogger("Instruments"));
                var c = new HttpClient();
                var responseStream = await c.GetStreamAsync("http://localhost:22060/clients");

                using var sr = new StreamReader(responseStream);
                string responseText = await sr.ReadToEndAsync();
                JArray joResponse = JArray.Parse(responseText);
                var clientDatas = joResponse.Select((dynamic jsonObject) =>
                {
                    var portfolioItems =
                        JsonConvert.DeserializeObject<List<PortfolioData>>(
                            (string) (jsonObject["context"]["portfolio"] + ""));
                    if (portfolioItems == null)
                    {
                        return new ClientData();
                    }

                    double portfolioValue = portfolioItems.Select(pd => pd.Shares * pd.Price).Sum();
                    string message = jsonObject + "";

                    return new ClientData
                    {
                        Name = jsonObject["name"]["firstName"].Value + " " +
                               jsonObject["name"]["lastName"].Value,
                        Portfolio = portfolioItems,
                        PortfolioValue = portfolioValue,
                        Contact = gwSerializer.DeserializeMessage<T42Contact>(message)
                    };
                }).ToArray();

                return clientDatas.OrderByDescending(d => d.Portfolio.Count()).First().Portfolio.ToList();
            }
            catch
            {
                await Task.Delay(1000);
            }
        }
        return new List<PortfolioData>();
    }

    private async void RaiseNotification()
    {
        try
        {
            var notification = new Notification
            {
                Id = Guid.NewGuid().ToString(),
                Severity = Severity.High,
                Title = "Glazor has been logged as healthy",
                Source = "Glazor",
                Category = "test",
                Description = "Everything is ok"
            };
            var glue = await GetGlue().ConfigureAwait(false);
            await glue.Notifications.RaiseNotification(notification).ConfigureAwait(false);
            Console.WriteLine("Notification raised successfully");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

}

@code{
    readonly string methodName = "glazor";

    private async Task RegisterMethod()
    {
        var glue = await GetGlue().ConfigureAwait(false);

        await glue.Interop.RegisterEndpoint(builder => builder.SetName(methodName),
            async context =>
            {
                await context.ResultBuilder.Succeed().ConfigureAwait(false);
            }).ConfigureAwait(false);

        interopMessage = string.Empty;
        interopMessage = $"Registered method: {methodName}";
    }

    string interopMessage = string.Empty;

    private async Task InvokeMethod()
    {
        var glue = await GetGlue().ConfigureAwait(false);

        var invocationResult = await glue.Interop.Invoke(methodName, new Dictionary<string, object>()).ConfigureAwait(false);

        var status = invocationResult.IsFailed ? "Failed" : "Succeeded";

        interopMessage = string.Empty;
        interopMessage = $"Invoked method: {methodName} with status: {status}";
    }

}

@code {

    private async Task SetInstrument()
    {
        await SetRicInChannel(selectedInstrument);
    }

    private async Task SetRicInChannel(string ric)
    {
        var glue = await GetGlue().ConfigureAwait(false);
        IGlueChannelContext context;
        if (glueProvider.MainWindow is { } window)
        {
            context = window.ChannelContext;
            if (context == null)
            {
                return;
            }
        }
        else
        {
            var redChannel = await glue.Channels.AwaitChannel(channel => channel.Name == "Red").ConfigureAwait(false);
            context = glue.Channels.JoinChannel(redChannel);
        }

        await context.SetValue(ric, "partyPortfolio.ric").ConfigureAwait(false);
    }

}

@code {

    private Task<IGlue42Base> GetGlue()
        => glueProvider.InitGlue(navigationManager_.Uri);

}

@code {

    private async Task StartApplication()
    {
        var glue = await GetGlue().ConfigureAwait(false);
        var app = await glue.AppManager.AwaitApplication(a => a.Name == "channelsclientportfolio").ConfigureAwait(false);

        var instance = await app.Start<StartupWindowConfig>(a => a.WithChannel("Red")).ConfigureAwait(false);
    }

}
